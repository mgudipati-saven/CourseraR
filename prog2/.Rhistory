x <- 1
x
names(x)
names(x) <- c("foo")
names(x)
x -< c(1, 2, NA, 3)
x <- c(1, 2, NA, 3)
x
bad <- is.na(x)
bad
x[bad]
x[!bad]
good <- complete.cases(x)
good
x[good[]]
x <- matrix(1:4, 2, 3)
x <- matrix(1:4, 2, 2)
x
x <- matrix(4:8, 2, 2)
x <- matrix(4:7, 2, 2)
x
y <- matrix(rep(10, 4), 2, 2)
y
rep(10,3)
x %*% y
x * y
x+y
str(.Platform)
version
getwd
getwd()
cube <- function(x, n) {
x^3
}
cube
cube(3)
pow <- function(x = 4, n = 3) {
x^n
}
pow
pow()
x <- 1:10
if(x > 5) {
x <- 0
}
x
library(datasets)
data(iris)
?iris
iris
iris[iris$Species == virginica]
iris[iris$Species == 'virginica']
iris[iris$Species == "virginica"]
iris["virginica"]
iris["Species"]
iris["Species"] == "virginica"
iris[iris["Species"] == "virginica", ]
iris[iris["Species"] == "virginica", ][, iris$Sepal.Length]
iris[iris["Species"] == "virginica", ][, iris["Sepal.Length"]]
iris[iris["Species"] == "virginica", ][, [["Sepal.Length"]]
iris[iris["Species"] == "virginica", ][iris$Sepal.Length]
iris[iris["Species"] == "virginica", ]["iris$Sepal.Length"]
iris[iris["Species"] == "virginica", ][["iris$Sepal.Length"]]
iris[iris["Species"] == "virginica", ][["Sepal.Length"]]
mean(iris[iris["Species"] == "virginica", ][["Sepal.Length"]])
lapply(iris[iris["Species"] == "virginica", ], mean)
lapply(iris, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
class(iris)
class(iris[, 1:4])
iris[, 1:4]
iris
apply(iris, 2, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
split(iris, iris$Species)
mtcars
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
abs(209.21429 - 82.63636)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
debug(ls)
ls
n
debug(ls)
ls
ls()
id <- 1:332
files <- sapply(id, paste, ".csv", sep = "")
files
for (i in files) { print i}
for (i in files) { print(i)}
lapply(iris[iris["Species"] == "virginica", ], mean)
clear
cls
data <- read.csv("001.csv")
getwd()
setwd("~/CourseraR/prog2/specdata")
data <- read.csv("001.csv")
data
good = complete.cases(data)
good
data[good, ]
nrows(data[good, ])
nrow(data[good, ])
nobs <- nrow(data[good, ])
nobs
file
print(1, nobs)
print(nobs)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
files <- sapply(id, paste, ".csv", sep = "")
for (file in files) {
data <- read.csv(file)
good = complete.cases(data)
nobs <- nrow(data[good, ])
print(nobs)
}
}
id
for (i in id) print(i)
getmonitor <- function(id, directory, summarize = FALSE) {
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
file <- paste(directory, .Platform$file.sep, sprintf("%03d", as.numeric(id)), ".csv", sep = "")
data <- read.csv(file)
if (summarize == TRUE) print(summary(data))
return(data)
}
print(c(1,3))
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
for (i in id) {
data <- getmonitor(id, directory)
good = complete.cases(data)
nobs <- nrow(data[good, ])
print(c(id,nobs))
}
}
complete(".")
setwd("~/CourseraR/prog2")
complete("specdata")
getmonitor(1, "specdata")
getmonitor(1, "specdata")
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
for (i in id) {
data <- getmonitor(i, directory)
good = complete.cases(data)
nobs <- nrow(data[good, ])
print(c(id,nobs))
}
}
complete("specdata")
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
for (i in id) {
data <- getmonitor(i, directory)
good = complete.cases(data)
nobs <- nrow(data[good, ])
print(c(i,nobs))
}
}
complete("specdata")
complete("specdata", 2)
complete("specdata", 10)
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25
)
complete("specdata", 3)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
for (i in id) {
data <- getmonitor(i, directory)
good = complete.cases(data)
append(nobs, nrow(data[good, ]))
}
data.frame(id, nobs)
}
complete("specdata", 3)
complete("specdata", 1)
complete("specdata", 2)
complete("specdata", 3)
complete("specdata")
complete("specdata", 3)
complete("specdata", 1:3)
append(nobs, 100)
append(nobs, 100)
append(nobs, 1000)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
nobs <- numeric()
for (i in id) {
data <- getmonitor(i, directory)
good = complete.cases(data)
nobs <- c(nobs, nrow(data[good, ]))
}
data.frame(id, nobs)
}
complete("specdata", 1:3)
complete("specdata")
complete("specdata", 1:3)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
source("http://spark-public.s3.amazonaws.com/compdata/scripts/complete-test.R")
complete.testscript()
complete.testscript
sample(332, 10)
complete("specdata", sample(332, 10))
data
data[good,]
data[good,]["sulphate"]
data[good,]["sulfate"]
data[good,]["sulfate"]
data[good,]["nitrate"]
class(data[good,]["nitrate"])
cor(data)
data[good,][data$nitrate]
data[good,][["nitrate"]]
data[good,][["nitrate"]]
cor(data[good,][["sulfate"]], data[good,][["nitrate"]])
comp <- complete("specdata", sample(332, 10))
comp
comp["id"]
comp[["id"]]
comp[245]
comp[, id]
comp[, "id"]
thr <- comp[, "id"] > 200
thr
comp[thr, ]
thr <- comp[, "nobs"] > 200
comp[thr, ]
comp[thr, ][, "id"]
thr <- comp[, "nobs"] >= 200
thr
comp[thr, ][, "id"]
cor(data[good,][["sulfate"]], data[good,][["nitrate"]])
data
cor(data[["sulfate"]], data[["nitrate"]])
cor(data[["sulfate"]], data[["nitrate"]], na.rm = TRUE)
cor(data[good,][["sulfate"]], data[good,][["nitrate"]])
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
cors <- numeric()
comp <- complete(directory)
met <- comp[, "nobs"] >= threshold
ids <- comp[met, ][, "id"]
for (i in ids) {
data <- getmonitor(i, directory)
good = complete.cases(data)
cors <- c(cors, cor(data[good,][["sulfate"]], data[good,][["nitrate"]]))
}
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
cors <- numeric()
comp <- complete(directory)
met <- comp[, "nobs"] >= threshold
ids <- comp[met, ][, "id"]
for (i in ids) {
data <- getmonitor(i, directory)
good = complete.cases(data)
cors <- c(cors, cor(data[good,][["sulfate"]], data[good,][["nitrate"]]))
}
return(cors)
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
length(cr)
summary(cr)
source("http://spark-public.s3.amazonaws.com/compdata/scripts/corr-test.R")
corr.testscript()
