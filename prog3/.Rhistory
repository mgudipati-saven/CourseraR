x <- 1
x
names(x)
names(x) <- c("foo")
names(x)
x -< c(1, 2, NA, 3)
x <- c(1, 2, NA, 3)
x
bad <- is.na(x)
bad
x[bad]
x[!bad]
good <- complete.cases(x)
good
x[good[]]
x <- matrix(1:4, 2, 3)
x <- matrix(1:4, 2, 2)
x
x <- matrix(4:8, 2, 2)
x <- matrix(4:7, 2, 2)
x
y <- matrix(rep(10, 4), 2, 2)
y
rep(10,3)
x %*% y
x * y
x+y
str(.Platform)
version
getwd
getwd()
cube <- function(x, n) {
x^3
}
cube
cube(3)
pow <- function(x = 4, n = 3) {
x^n
}
pow
pow()
x <- 1:10
if(x > 5) {
x <- 0
}
x
library(datasets)
data(iris)
?iris
iris
iris[iris$Species == virginica]
iris[iris$Species == 'virginica']
iris[iris$Species == "virginica"]
iris["virginica"]
iris["Species"]
iris["Species"] == "virginica"
iris[iris["Species"] == "virginica", ]
iris[iris["Species"] == "virginica", ][, iris$Sepal.Length]
iris[iris["Species"] == "virginica", ][, iris["Sepal.Length"]]
iris[iris["Species"] == "virginica", ][, [["Sepal.Length"]]
iris[iris["Species"] == "virginica", ][iris$Sepal.Length]
iris[iris["Species"] == "virginica", ]["iris$Sepal.Length"]
iris[iris["Species"] == "virginica", ][["iris$Sepal.Length"]]
iris[iris["Species"] == "virginica", ][["Sepal.Length"]]
mean(iris[iris["Species"] == "virginica", ][["Sepal.Length"]])
lapply(iris[iris["Species"] == "virginica", ], mean)
lapply(iris, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
class(iris)
class(iris[, 1:4])
iris[, 1:4]
iris
apply(iris, 2, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
split(iris, iris$Species)
mtcars
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
abs(209.21429 - 82.63636)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
debug(ls)
ls
n
debug(ls)
ls
ls()
?unique
x <- c(3:5, 11:8, 8 + 0:5)
x
unique(x)
iris
unique(iris)
?compare
?equal
?studio
?factor
LETTERS[1:3]
factor(LETTERS[1:3])
factor(LETTERS[1:3], 2)
factor(LETTERS[1:3], 2), 2
factor(LETTERS[1:3])
setwd("~/CourseraR/prog3")
