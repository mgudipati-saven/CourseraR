x <- 1
x
names(x)
names(x) <- c("foo")
names(x)
x -< c(1, 2, NA, 3)
x <- c(1, 2, NA, 3)
x
bad <- is.na(x)
bad
x[bad]
x[!bad]
good <- complete.cases(x)
good
x[good[]]
x <- matrix(1:4, 2, 3)
x <- matrix(1:4, 2, 2)
x
x <- matrix(4:8, 2, 2)
x <- matrix(4:7, 2, 2)
x
y <- matrix(rep(10, 4), 2, 2)
y
rep(10,3)
x %*% y
x * y
x+y
str(.Platform)
version
getwd
getwd()
cube <- function(x, n) {
x^3
}
cube
cube(3)
pow <- function(x = 4, n = 3) {
x^n
}
pow
pow()
x <- 1:10
if(x > 5) {
x <- 0
}
x
library(datasets)
data(iris)
?iris
iris
iris[iris$Species == virginica]
iris[iris$Species == 'virginica']
iris[iris$Species == "virginica"]
iris["virginica"]
iris["Species"]
iris["Species"] == "virginica"
iris[iris["Species"] == "virginica", ]
iris[iris["Species"] == "virginica", ][, iris$Sepal.Length]
iris[iris["Species"] == "virginica", ][, iris["Sepal.Length"]]
iris[iris["Species"] == "virginica", ][, [["Sepal.Length"]]
iris[iris["Species"] == "virginica", ][iris$Sepal.Length]
iris[iris["Species"] == "virginica", ]["iris$Sepal.Length"]
iris[iris["Species"] == "virginica", ][["iris$Sepal.Length"]]
iris[iris["Species"] == "virginica", ][["Sepal.Length"]]
mean(iris[iris["Species"] == "virginica", ][["Sepal.Length"]])
lapply(iris[iris["Species"] == "virginica", ], mean)
lapply(iris, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
class(iris)
class(iris[, 1:4])
iris[, 1:4]
iris
apply(iris, 2, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
split(iris, iris$Species)
mtcars
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
abs(209.21429 - 82.63636)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
debug(ls)
ls
n
debug(ls)
ls
ls()
?unique
x <- c(3:5, 11:8, 8 + 0:5)
x
unique(x)
iris
unique(iris)
?compare
?equal
?studio
?factor
LETTERS[1:3]
factor(LETTERS[1:3])
factor(LETTERS[1:3], 2)
factor(LETTERS[1:3], 2), 2
factor(LETTERS[1:3])
data(USArrests)
head(USArrests)
?data
ls()
x
rm("x")
ls()
head(USArrests)
USArrests[order(USArrests$Murder),][0]
USArrests[order(USArrests$Murder),]
USArrests[order(USArrests$Murder),][0,]
USArrests[order(USArrests$Murder),][1,]
USArrests[USArrests$Murder < 4.0, ]
USArrests[USArrests$Murder < 4.0, ][]
names(USArrests[USArrests$Murder < 4.0, ][])
dimnames(USArrests[USArrests$Murder < 4.0, ][])
dimnames(USArrests[USArrests$Murder < 4.0, ][])[1]
dimnames(USArrests[USArrests$Murder < 4.0, ][])[2]
head(USArrests)
data(anorexia, package="MASS")
head(data)
head(anorexia)
anorexia
head(anorexia)
count <- function(cause = NULL) {
## Check that "cause" is non-NULL; else throw error
if (is.null(cause)) stop("cause is NULL")
## Check that specific "cause" is allowed; else throw error
causes <- c("asphyxiation", "blunt force", "other", "shooting", "stabbing", "unknown")
if (!cause %in% causes) stop("invalid cause")
## Read "homicides.txt" data file
homicides <- readLines("homicides.txt")
## Extract causes of death
r <- grep(paste("Cause: [", toupper(substring(cause, 1, 1)),
tolower(substring(cause, 1, 1)), "]",
substring(cause, 2), sep = ""),
homicides)
## Return integer containing count of homicides for that cause
return(length(r))
}
setwd("~/CourseraR/prog4")
source("count.R")
count("other")
homicides[1]
homicides <- readLines(homicides.txt)
dir()
homicides <- readLines("homicides.txt")
homicides[1]
homicides[2]
homicides[1000]
grep("Age: ", homicides)
length(grep("Age: ", homicides))
length(grep("Age: |years old", homicides))
length(grep(years old", homicides))
length(grep("years old", homicides))
homicides[1000]
homicides[1]
length(grep(" 21years old", homicides))
length(grep("21 years old", homicides))
length(grep("5 years old", homicides))
length(grep("3 years old", homicides))
length(grep(" 3 years old", homicides))
length(grep(" 21 years old", homicides))
r <- grep(paste(" ", age, " years old", sep = ""), homicides)
age = 3
r <- grep(paste(" ", age, " years old", sep = ""), homicides)
r
age = 21
r <- grep(paste(" ", age, " years old", sep = ""), homicides)
r
length(r)
age = 2
r <- grep(paste(" ", age, " years old", sep = ""), homicides)
length(r)
r
homicides[264]
age = -1
r <- grep(paste(" ", age, " years old", sep = ""), homicides)
length(r)
regmatches(homicides, r)
regexpr(paste(" ", age, " years old", sep = ""), homicides))
regexpr(paste(" ", age, " years old", sep = ""), homicides)
regexpr(paste(" ", age, " years old", sep = ""), homicides) -> r
r
age = 2
regexpr(paste(" ", age, " years old", sep = ""), homicides) -> r
r
regmatches(homicides, r)
homicides[164]
homicides[164]
source("http://spark-public.s3.amazonaws.com/compdata/scripts/submitscript4.R")
submit()
submit()
?setOldClass
